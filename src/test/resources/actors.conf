akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  stdout-loglevel = "DEBUG"
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
  actor {
    provider = "cluster"  
    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }  
    
    deployment {
    	/userProfile {
    		dispatcher = common-dispatcher
			router = round-robin-pool
			cluster {
		        enabled = off
		        max-nr-of-instances-per-node = 4
		        allow-local-routees = on
	      	}
    	},
    	/userTransaction {
    		dispatcher = common-dispatcher
			router = round-robin-pool
			cluster {
		        enabled = off
		        max-nr-of-instances-per-node = 1
		        allow-local-routees = on
	      	}
    	}
    
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
    }
  }

  cluster {
    seed-nodes = ["akka.tcp://name1@127.0.0.1:2551", "akka.tcp://name2@127.0.0.1:2552"]
  }

}

common-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 2
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 10
  }  
  throughput = 1
}

